{"version":3,"sources":["index.js"],"names":["_asyncWX","require","_runtime","_interopRequireDefault","Page","data","address","cart","allChecked","totalPrice","totalNum","onShow","wx","getStorageSync","all","provinceName","cityName","countyName","detailInfo","this","setCart","onLoad","setData","handleChooseAddress","chooseAddress","success","setStorageSync","authSetting","result","scopeAdress","undefined","console","log","handleItemChange","goods_id","e","currentTarget","dataset","id","index","findIndex","v","checked","goods_price","num","length","handleItemAllCheck","_this$data","forEach","handleItemNumEdit","_e$currentTarget$data","operation","res","async","_context","prev","next","awrap","showModel","content","sent","confirm","splice","stop","handlePay","_this$data2","_context2","userName","showToast","title","abrupt","url"],"mappings":"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","file":"index.min.js","sourcesContent":["import {\r\n  getSetting,\r\n  openSetting,\r\n  chooseAdress,\r\n  showModel,\r\n  showToast,\r\n} from \"../../utils/asyncWX.js\";\r\nimport regeneratorRuntime from \"../../lib/runtime/runtime\";\r\n// 全选的实现\r\n// onShow 获取缓存中的购物车数组\r\n//根据购物车中的商品数据 所有的商品都被选中 checked=true 全选就被选中\r\n\r\n/* 总价格的实现\r\n 需要商品被选中再计算\r\n 获取购物车的数组\r\n 遍历\r\n 判断商品是否被选中\r\n 总价格 += 商品的单价*数量\r\n 总数量 += 商品的数量\r\n 把计算后的价格和数量 设置回data中即可\r\n*/\r\n\r\n/*\r\n  选中状态同步的实现\r\n  绑定change事件\r\n  获取被修改的商品对象\r\n  重新填充回data中和缓存中\r\n */\r\n\r\n/*\r\n  全选和反选功能\r\n  给全选的复选框绑定事件 change\r\n  获取data中的全选变量 allChecked\r\n  直接取反 allChecked = !allChecked\r\n  遍历购物车数组 让里面商品选中状态跟随 allChecked改变而改变\r\n  把购物车数组和allChecked重新设置回data 把购物车重新设置为缓存中\r\n */\r\n\r\n/*\r\n  商品数量的编辑功能\r\n  + - 绑定同一个点击事件 区分的关键 自定义属性\r\n  + +1\r\n  - -1\r\n  传递被点击的商品id goods_id\r\n  获取data中的购物车数组\r\n  根据id来获取被修改的商品对象\r\n  当购物车的数量=1  同时用户点击-\r\n  弹窗提示(showModel)用户是否要删除 api\r\n  确定 执行删除\r\n  取消 什么都不做\r\n  直接修改商品的数量属性\r\n  把购物车数组重新设置回缓存中和data中\r\n  this.setCart()\r\n */\r\n\r\n/*\r\n  结算\r\n  判断有没有收获地址信息\r\n  判断用户有没有选择购买商品\r\n  经过以上验证 跳转到支付页面\r\n \r\n  */\r\nPage({\r\n  data: {\r\n    address: {},\r\n    cart: [],\r\n    allChecked: false,\r\n    totalPrice: 0,\r\n    totalNum: 0,\r\n  },\r\n  onShow() {\r\n    // 获取缓存中的地址\r\n    const address = wx.getStorageSync(\"address\");\r\n    // 获取缓存中的购物车数据\r\n    const cart = wx.getStorageSync(\"cart\") || [];\r\n    // // 计算全选\r\n    // // every 数组方法 会遍历 接收一个回调参数\r\n    // // 每一个回调函数都返回true 那么every方法返回true\r\n    // // 如果有一个返回false 则every不再执行 直接返回false\r\n    // // const allChecked = cart.length ? cart.every((v) => v.checked) : false;\r\n    // // 空数组调用every就是true\r\n    // console.log(allChecked);\r\n    // let totalPrice = 0;\r\n    // let totalNum = 0;\r\n    // let allChecked = true;\r\n    // cart.forEach((v) => {\r\n    //   if (v.checked) {\r\n    //     totalPrice += v.goods_price * v.num;\r\n    //     totalNum += v.num;\r\n    //   } else {\r\n    //     allChecked = false;\r\n    //   }\r\n    // });\r\n    // allChecked = cart.length != 0 ? true : false;\r\n    address.all =\r\n      address.provinceName +\r\n      address.cityName +\r\n      address.countyName +\r\n      address.detailInfo;\r\n    // // 设置data数据\r\n    // this.setData({\r\n    //   address,\r\n    //   cart,\r\n    //   allChecked,\r\n    //   totalPrice,\r\n    //   totalNum,\r\n    // });\r\n\r\n    this.setCart(cart);\r\n    this.setData({\r\n      address,\r\n    });\r\n  },\r\n  //options(Object)\r\n  onLoad: function (options) {},\r\n  // 获取用户地址\r\n  // 调用小程序内置的API 获取用户的地址\r\n\r\n  handleChooseAddress() {\r\n    // wx.chooseAddress({\r\n    //   success: (result) => {\r\n    //     console.log(result);\r\n    //   },\r\n    //   fail: () => {},\r\n    //   complete: () => {},\r\n    // });\r\n    wx.getSetting({\r\n      success: (result) => {\r\n        // console.log(result);\r\n        const scopeAdress = result.authSetting[\"scope.address\"];\r\n        if (scopeAdress === true || scopeAdress === undefined) {\r\n          wx.chooseAddress({\r\n            success: (result) => {\r\n              console.log(result);\r\n              wx.setStorageSync(\"address\", result);\r\n            },\r\n          });\r\n        }\r\n      },\r\n    });\r\n    // 使用包装的方法之后\r\n    // 获取权限状态\r\n    // async handleChooseAddress() {\r\n    //   wx.getSetting({\r\n    //     complete: (res) => {},\r\n    //   });\r\n    //   const res1 = await getSetting();\r\n    //   const scopeAdress = res1.authSetting[\"scope.address\"];\r\n    //   if (scopeAdress === true || scopeAdress === undefined) {\r\n    //     //  调用获取收货地址的代码的api\r\n    //     const res2 = await chooseAddress();\r\n    //   } else {\r\n    //     // 诱导用户打开获取权限 即调用打开函数\r\n    //     await openSetting();\r\n\r\n    //     // 调用获取地址的api\r\n    //     const res2 = await chooseAddress();\r\n    //   }\r\n    // },\r\n  },\r\n  handleItemChange(e) {\r\n    // 获取被修改的商品的id\r\n    const goods_id = e.currentTarget.dataset.id;\r\n    // 获取购物车的数组\r\n    let { cart } = this.data;\r\n    // 获取被修改的商品对象\r\n    let index = cart.findIndex((v) => v.goods_id === goods_id);\r\n    // 选中状态取反\r\n    cart[index].checked = !cart[index].checked;\r\n    this.setCart(cart);\r\n  },\r\n  // 设置购物车状态 重新计算\r\n  setCart(cart) {\r\n    let totalPrice = 0;\r\n    let totalNum = 0;\r\n    let allChecked = true;\r\n    cart.forEach((v) => {\r\n      if (v.checked) {\r\n        totalPrice += v.goods_price * v.num;\r\n        totalNum += v.num;\r\n      } else {\r\n        allChecked = false;\r\n      }\r\n    });\r\n    allChecked = cart.length != 0 ? allChecked : false;\r\n    // 设置data数据\r\n    this.setData({\r\n      cart,\r\n      allChecked,\r\n      totalPrice,\r\n      totalNum,\r\n    });\r\n    wx.setStorageSync(\"cart\", cart);\r\n  },\r\n  // 商品全选功能\r\n  handleItemAllCheck() {\r\n    // 获取data中的数据\r\n    let { cart, allChecked } = this.data;\r\n    // 修改值\r\n    allChecked = !allChecked;\r\n    // 循环修改cart数组中的商品状态\r\n    cart.forEach((v) => (v.checked = allChecked));\r\n    // 把修改后的值填充回data和缓存中\r\n    this.setData({ cart, allChecked });\r\n  },\r\n  async handleItemNumEdit(e) {\r\n    const { operation, id } = e.currentTarget.dataset;\r\n    let { cart } = this.data;\r\n    // 找到需要修改的商品\r\n    const index = cart.findIndex((v) => v.goods_id === id);\r\n    // 判断是否要执行删除\r\n    if (cart[index].num === 1 && operation === -1) {\r\n      // 弹窗提示\r\n      // wx.showModal({\r\n      //   title: \"提示\",\r\n      //   content: \"您是否要删除\",\r\n      //   // 之所以用箭头函数 是因为下面this如果不用箭头函数 this不是我们想要的那个值\r\n      //   success: (res) => {\r\n      //     if (res.confirm) {\r\n      //       //删除\r\n      //       console.log(index);\r\n      //       cart.splice(index, 1);\r\n      //       this.setCart(cart);\r\n      //     } else if (res.cancel) {\r\n      //       console.log(\"calcel\");\r\n      //     } // 修改数量\r\n      //   },\r\n      // });\r\n      const res = await showModel({ content: \"您是否要删除?\" });\r\n      console.log(res);\r\n      if (res.confirm) {\r\n        cart.splice(index, 1);\r\n        this.setCart(cart);\r\n      }\r\n    } else {\r\n      cart[index].num += operation;\r\n      // 设置回缓存和data中\r\n      this.setCart(cart);\r\n    }\r\n  },\r\n  async handlePay(e) {\r\n    // 点击结算功能\r\n\r\n    // 判断收货地址\r\n    const { address, totalNum } = this.data;\r\n    if (!address.userName) {\r\n      await showToast({ title: \"您还没有选择收货地址\" });\r\n      return;\r\n    }\r\n    // 判断用户有没有选购商品\r\n    if (totalNum === 0) {\r\n      await showToast({ title: \"您还没有选购商品\" });\r\n      return;\r\n    }\r\n    // 执行正常逻辑 跳转到支付页面\r\n    wx.navigateTo({\r\n      url: \"/pages/pay/index\",\r\n    });\r\n  },\r\n});\r\n"]}